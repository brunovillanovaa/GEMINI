#Instalando o SDK do google

!pip install -q -U google-generativeai

# Import the Python SDK
import google.generativeai as genai
GOOGLE_API_KEY='SUA-CHAVE'
genai.configure(api_key=GOOGLE_API_KEY)

#Listar modelos disponíveis
for m in genai.list_models():
  if 'generateContent' in m.supported_generation_methods:
    print(m.name)

#Parâmetros de configurações
generation_config = {
    'candidate_count': 1,
    'temperature': 0.5,
}

#Configurações de segurança
safety_settings = {
    'HARASSMENT': 'BLOCK_NONE',
    'HATE': 'BLOCK_NONE',
    'SEXUAL': 'BLOCK_NONE',
    'DANGEROUS': 'BLOCK_NONE',
}

#Inicializando o modelo
model = genai.GenerativeModel(model_name='gemini-1.0-pro',
                              generation_config=generation_config,
                              safety_settings=safety_settings)

#Criando uma response(resposta)
response = model.generate_content("Gere uma aula sobre Low Code para ser apresentada em um curso de Pós Graduação")
print(response.text)

#Criando o Chat
chat = model.start_chat(history=[])

prompt = input('Digite sua pergunta: ')

while prompt != "fim":
  response = chat.send_message(prompt)
  print("Resposta:", response.text, '\n\n')
  prompt = input('Esperando prompt: ')

#Melhorando a visualização
#Melhorando a visualização
#Código disponível em https://ai.google.dev/tutorials/python_quickstart#import_packages
import textwrap
from IPython.display import display
from IPython.display import Markdown

def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

#Imprimindo o histórico
for message in chat.history:
  display(to_markdown(f'**{message.role}**: {message.parts[0].text}'))
  print('-------------------------------------------')
